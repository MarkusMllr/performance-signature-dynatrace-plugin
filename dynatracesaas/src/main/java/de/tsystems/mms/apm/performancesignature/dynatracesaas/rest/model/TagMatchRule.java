/*
 * Dynatrace Environment API
 * Documentation of the Dynatrace REST API. Refer to the [help page](https://www.dynatrace.com/support/help/shortlink/section-api) to read about use-cases and examples.
 *
 * OpenAPI spec version: 1.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package de.tsystems.mms.apm.performancesignature.dynatracesaas.rest.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;

import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import static de.tsystems.mms.apm.performancesignature.ui.util.PerfSigUIUtils.toIndentedString;

/**
 * Allows to attach an event to an entity that fits the specified criteria
 */
@ApiModel(description = "Allows to attach an event to an entity that fits the specified criteria")

public class TagMatchRule {
    @SerializedName("meTypes")
    private List<MeTypesEnum> meTypes = null;
    @SerializedName("tags")
    private List<TagInfo> tags = null;

    public TagMatchRule meTypes(List<MeTypesEnum> meTypes) {
        this.meTypes = meTypes;
        return this;
    }

    public TagMatchRule addMeTypesItem(MeTypesEnum meTypesItem) {
        if (this.meTypes == null) {
            this.meTypes = new ArrayList<>();
        }
        this.meTypes.add(meTypesItem);
        return this;
    }

    /**
     * List of ME types the event can be attached to
     *
     * @return meTypes
     **/
    @ApiModelProperty(value = "List of ME types the event can be attached to")
    public List<MeTypesEnum> getMeTypes() {
        return meTypes;
    }

    public void setMeTypes(List<MeTypesEnum> meTypes) {
        this.meTypes = meTypes;
    }

    public TagMatchRule tags(List<TagInfo> tags) {
        this.tags = tags;
        return this;
    }

    public TagMatchRule addTagsItem(TagInfo tagsItem) {
        if (this.tags == null) {
            this.tags = new ArrayList<>();
        }
        this.tags.add(tagsItem);
        return this;
    }

    /**
     * List of Tags an entity has to match
     *
     * @return tags
     **/
    @ApiModelProperty(value = "List of Tags an entity has to match")
    public List<TagInfo> getTags() {
        return tags;
    }

    public void setTags(List<TagInfo> tags) {
        this.tags = tags;
    }

    @Override
    public String toString() {
        return "class TagMatchRule {\n" +
                "    meTypes: " + toIndentedString(meTypes) + "\n" +
                "    tags: " + toIndentedString(tags) + "\n" +
                "}";
    }

    /**
     * Gets or Sets meTypes
     */
    @JsonAdapter(MeTypesEnum.Adapter.class)
    public enum MeTypesEnum {
        HOST("HOST"),
        PROCESS_GROUP_INSTANCE("PROCESS_GROUP_INSTANCE"),
        DOCKER_CONTAINER_GROUP_INSTANCE("DOCKER_CONTAINER_GROUP_INSTANCE"),
        DISK("DISK"),
        NETWORK_INTERFACE("NETWORK_INTERFACE"),
        HYPERVISOR("HYPERVISOR"),
        VIRTUALMACHINE("VIRTUALMACHINE"),
        EC2_INSTANCE("EC2_INSTANCE"),
        ELASTIC_LOAD_BALANCER("ELASTIC_LOAD_BALANCER"),
        RELATIONAL_DATABASE_SERVICE("RELATIONAL_DATABASE_SERVICE"),
        AWS_LAMBDA_FUNCTION("AWS_LAMBDA_FUNCTION"),
        EBS_VOLUME("EBS_VOLUME"),
        DYNAMO_DB_TABLE("DYNAMO_DB_TABLE"),
        SERVICE("SERVICE"),
        APPLICATION("APPLICATION"),
        MOBILE_APPLICATION("MOBILE_APPLICATION"),
        CUSTOM_APPLICATION("CUSTOM_APPLICATION"),
        SYNTHETIC_TEST("SYNTHETIC_TEST"),
        CUSTOM_DEVICE("CUSTOM_DEVICE"),
        APPLICATION_METHOD("APPLICATION_METHOD"),
        SERVICE_METHOD("SERVICE_METHOD"),
        GEOLOCATION("GEOLOCATION"),
        PROCESS_GROUP("PROCESS_GROUP"),
        OPENSTACK_REGION("OPENSTACK_REGION"),
        OPENSTACK_VM("OPENSTACK_VM"),
        CINDER_VOLUME("CINDER_VOLUME"),
        NEUTRON_SUBNET("NEUTRON_SUBNET"),
        SWIFT_CONTAINER("SWIFT_CONTAINER"),
        OPENSTACK_PROJECT("OPENSTACK_PROJECT"),
        DCRUM_SERVICE("DCRUM_SERVICE"),
        DCRUM_SERVICE_INSTANCE("DCRUM_SERVICE_INSTANCE"),
        DCRUM_APPLICATION("DCRUM_APPLICATION"),
        VMWARE_DATACENTER("VMWARE_DATACENTER"),
        AZURE_REGION("AZURE_REGION"),
        AZURE_VM("AZURE_VM"),
        AWS_AVAILABILITY_ZONE("AWS_AVAILABILITY_ZONE"),
        GEOLOC_SITE("GEOLOC_SITE"),
        AUXILIARY_SYNTHETIC_TEST("AUXILIARY_SYNTHETIC_TEST"),
        CUSTOM_DEVICE_GROUP("CUSTOM_DEVICE_GROUP"),
        SYNTHETIC_TEST_STEP("SYNTHETIC_TEST_STEP"),
        AZURE_SQL_SERVER("AZURE_SQL_SERVER"),
        AZURE_APPLICATION_GATEWAY("AZURE_APPLICATION_GATEWAY"),
        AZURE_LOAD_BALANCER("AZURE_LOAD_BALANCER"),
        AZURE_API_MANAGEMENT_SERVICE("AZURE_API_MANAGEMENT_SERVICE"),
        AZURE_REDIS_CACHE("AZURE_REDIS_CACHE"),
        AZURE_EVENT_HUB("AZURE_EVENT_HUB"),
        SERVICE_INSTANCE("SERVICE_INSTANCE"),
        OS("OS"),
        HOST_GROUP("HOST_GROUP"),
        ENVIRONMENT("ENVIRONMENT"),
        GOOGLE_COMPUTE_ENGINE("GOOGLE_COMPUTE_ENGINE");

        private String value;

        MeTypesEnum(String value) {
            this.value = value;
        }

        public static MeTypesEnum fromValue(String text) {
            return Arrays.stream(MeTypesEnum.values()).filter(b -> b.value.equals(text)).findFirst().orElse(null);
        }

        public String getValue() {
            return value;
        }

        @Override
        public String toString() {
            return value;
        }

        public static class Adapter extends TypeAdapter<MeTypesEnum> {
            @Override
            public void write(final JsonWriter jsonWriter, final MeTypesEnum enumeration) throws IOException {
                jsonWriter.value(enumeration.getValue());
            }

            @Override
            public MeTypesEnum read(final JsonReader jsonReader) throws IOException {
                String value = jsonReader.nextString();
                return MeTypesEnum.fromValue(value);
            }
        }
    }

}

