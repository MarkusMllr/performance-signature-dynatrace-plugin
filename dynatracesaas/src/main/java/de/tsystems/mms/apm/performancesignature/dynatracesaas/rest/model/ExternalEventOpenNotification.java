/*
 * Dynatrace Environment API
 * Documentation of the Dynatrace REST API. Refer to the [help page](https://www.dynatrace.com/support/help/shortlink/section-api) to read about use-cases and examples.
 *
 * OpenAPI spec version: 1.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package de.tsystems.mms.apm.performancesignature.dynatracesaas.rest.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModelProperty;

import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import static de.tsystems.mms.apm.performancesignature.ui.util.PerfSigUIUtils.toIndentedString;

/**
 * ExternalEventOpenNotification
 */

public class ExternalEventOpenNotification {
    @SerializedName("testId")
    private String testId = null;

    @SerializedName("eventId")
    private String eventId = null;

    @SerializedName("name")
    private String name = null;
    @SerializedName("eventType")
    private EventTypeEnum eventType = null;
    @SerializedName("Location ids where the event happens.")
    private List<String> locationIdsWhereTheEventHappens_ = null;

    public ExternalEventOpenNotification testId(String testId) {
        this.testId = testId;
        return this;
    }

    /**
     * Test id.
     *
     * @return testId
     **/
    @ApiModelProperty(value = "Test id.")
    public String getTestId() {
        return testId;
    }

    public void setTestId(String testId) {
        this.testId = testId;
    }

    public ExternalEventOpenNotification eventId(String eventId) {
        this.eventId = eventId;
        return this;
    }

    /**
     * Unique id which identifies the event.
     *
     * @return eventId
     **/
    @ApiModelProperty(value = "Unique id which identifies the event.")
    public String getEventId() {
        return eventId;
    }

    public void setEventId(String eventId) {
        this.eventId = eventId;
    }

    public ExternalEventOpenNotification name(String name) {
        this.name = name;
        return this;
    }

    /**
     * Name which will be used to display the event in the UI.
     *
     * @return name
     **/
    @ApiModelProperty(value = "Name which will be used to display the event in the UI.")
    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public ExternalEventOpenNotification eventType(EventTypeEnum eventType) {
        this.eventType = eventType;
        return this;
    }

    /**
     * Event type.
     *
     * @return eventType
     **/
    @ApiModelProperty(value = "Event type.")
    public EventTypeEnum getEventType() {
        return eventType;
    }

    public void setEventType(EventTypeEnum eventType) {
        this.eventType = eventType;
    }

    public ExternalEventOpenNotification locationIdsWhereTheEventHappens_(List<String> locationIdsWhereTheEventHappens_) {
        this.locationIdsWhereTheEventHappens_ = locationIdsWhereTheEventHappens_;
        return this;
    }

    public ExternalEventOpenNotification addLocationIdsWhereTheEventHappens_Item(String locationIdsWhereTheEventHappens_Item) {
        if (this.locationIdsWhereTheEventHappens_ == null) {
            this.locationIdsWhereTheEventHappens_ = new ArrayList<>();
        }
        this.locationIdsWhereTheEventHappens_.add(locationIdsWhereTheEventHappens_Item);
        return this;
    }

    /**
     * Get locationIdsWhereTheEventHappens_
     *
     * @return locationIdsWhereTheEventHappens_
     **/
    @ApiModelProperty()
    public List<String> getLocationIdsWhereTheEventHappens_() {
        return locationIdsWhereTheEventHappens_;
    }

    public void setLocationIdsWhereTheEventHappens_(List<String> locationIdsWhereTheEventHappens_) {
        this.locationIdsWhereTheEventHappens_ = locationIdsWhereTheEventHappens_;
    }

    @Override
    public String toString() {
        return "class ExternalEventOpenNotification {\n" +
                "    testId: " + toIndentedString(testId) + "\n" +
                "    eventId: " + toIndentedString(eventId) + "\n" +
                "    name: " + toIndentedString(name) + "\n" +
                "    eventType: " + toIndentedString(eventType) + "\n" +
                "    locationIdsWhereTheEventHappens_: " + toIndentedString(locationIdsWhereTheEventHappens_) + "\n" +
                "}";
    }

    /**
     * Event type.
     */
    @JsonAdapter(EventTypeEnum.Adapter.class)
    public enum EventTypeEnum {
        TESTOUTAGE("testOutage"),
        TESTSLOWDOWN("testSlowdown");

        private String value;

        EventTypeEnum(String value) {
            this.value = value;
        }

        public static EventTypeEnum fromValue(String text) {
            for (EventTypeEnum b : EventTypeEnum.values()) {
                if (b.value.equals(text)) {
                    return b;
                }
            }
            return null;
        }

        public String getValue() {
            return value;
        }

        @Override
        public String toString() {
            return value;
        }

        public static class Adapter extends TypeAdapter<EventTypeEnum> {
            @Override
            public void write(final JsonWriter jsonWriter, final EventTypeEnum enumeration) throws IOException {
                jsonWriter.value(enumeration.getValue());
            }

            @Override
            public EventTypeEnum read(final JsonReader jsonReader) throws IOException {
                String value = jsonReader.nextString();
                return EventTypeEnum.fromValue(value);
            }
        }
    }

}

